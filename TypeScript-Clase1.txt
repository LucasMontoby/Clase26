TypeScript:

Claro, vamos a empezar desde cero para ejecutar 
TypeScript en Node.js. Sigue estos pasos:

Paso 1: Instala Node.js y npm
------------------------------

Si aún no tienes Node.js y npm instalados en tu 
sistema, debes hacerlo primero. Puedes descargar 
e instalar Node.js desde el sitio web oficial: 
[Descargar Node.js](https://nodejs.org/).

Paso 2: Inicializa un Proyecto Node.js
-------------------------------------

Abre una terminal y navega a la ubicación donde 
deseas crear tu proyecto. Luego, ejecuta el siguiente
comando para crear un nuevo directorio de proyecto y un archivo `package.json`:

```bash
mkdir mi-proyecto-typescript
cd mi-proyecto-typescript
npm init -y
```

Paso 3: Instala TypeScript
-----------------------

A continuación, instala TypeScript como una 
dependencia de desarrollo en tu proyecto:

```bash
npm install --save-dev typescript
```

Paso 4: Configura TypeScript
------------------------

Ejecuta el siguiente comando para generar 
un archivo de configuración inicial:

```bash
npx tsc --init
```

Paso 5: Crea un archivo TypeScript
---------------------------------

Crea un archivo TypeScript en el directorio de tu 
proyecto. Por ejemplo, puedes crear un archivo 
llamado `app.ts` y agregar el siguiente código de 
ejemplo:

```typescript
function saludar(nombre: string) {
  console.log(`¡Hola, ${nombre}!`);
}

saludar('Mundo');
```

Paso 6: Compila TypeScript
------------------------

Para compilar tu código TypeScript en JavaScript, 
ejecuta el siguiente comando en tu terminal:

```bash
npx tsc
```

Esto tomará los archivos TypeScript de tu directorio,
los compilará y generará los archivos JavaScript 
en el directorio según la configuración que 
estableciste en `tsconfig.json`.

Paso 7: Ejecuta tu Aplicación
--------------------------

Ahora puedes ejecutar tu aplicación Node.js 
normalmente usando Node.js en el archivo JavaScript
compilado. Por ejemplo:

```bash
node app.js
```

Tu aplicación TypeScript se ejecutará y mostrará el 
mensaje "¡Hola, Mundo!" en la consola.

Con estos pasos, has configurado un proyecto Node.js 
básico con TypeScript y has compilado y ejecutado un 
archivo TypeScript en Node.js. 
Puedes continuar desarrollando tu aplicación 
TypeScript según tus necesidades.

........................................................................

Ejemplos:

Entendido, aquí tienes algunos ejemplos sencillos de 
TypeScript que puedes usar para explicar a tus 
estudiantes:

1. **Variables y Tipos de Datos:**
   ```typescript
   let nombre: string = "Juan";
   let edad: number = 25;
   let esEstudiante: boolean = true;
   ```

2. **Funciones:**
   ```typescript
   function saludar(nombre: string): string {
       return `Hola, ${nombre}!`;
   }

   const saludo: string = saludar("María");
   console.log(saludo);
   ```

3. **Interfaces:**
   ```typescript
   interface Producto {
       nombre: string;
       precio: number;
   }

   const producto: Producto = {
       nombre: "Camiseta",
       precio: 19.99
   };
   ```

4. **Clases:**
   ```typescript
   class Persona {
       constructor(public nombre: string, public edad: number) {}
   }

   const persona1 = new Persona("Luisa", 30);
   console.log(`Nombre: ${persona1.nombre}, Edad: ${persona1.edad}`);
   ```

5. **Arreglos:**
   ```typescript
   let numeros: number[] = [1, 2, 3, 4, 5];

   for (const numero of numeros) {
       console.log(numero);
   }
   ```

6. **Tipos de Uniones:**
   ```typescript
   type Resultado = string | number;

   let valor: Resultado = "Éxito";
   valor = 42;
   ```

7. **Enumeraciones:**
   ```typescript
   enum Dias {
       Lunes,
       Martes,
       Miércoles,
       Jueves,
       Viernes,
       Sábado,
       Domingo
   }

   let diaLaboral: Dias = Dias.Martes;
   ```

8. **Módulos:**
   **math.ts:**
   ```typescript
   export function sumar(a: number, b: number): number {
       return a + b;
   }
   ```

   **main.ts:**
   ```typescript
   import { sumar } from "./math";

   const resultado: number = sumar(5, 3);
   console.log(`La suma es: ${resultado}`);
   ```

Estos ejemplos son claros y simples, 
lo que facilitará la comprensión de los conceptos 
básicos de TypeScript a tus estudiantes. 
Puedes usarlos como punto de partida y luego 
agregar complejidad a medida que avances en tus 
lecciones. ¡Espero que sean útiles!